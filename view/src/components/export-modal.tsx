import { useState } from "react";
import { Button } from "./ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./ui/card";
import { Badge } from "./ui/badge";
import { X, Copy, Check, FileText, Code } from "lucide-react";
import { toast } from "sonner";

interface ExportModalProps {
  idea: {
    id: string;
    originalPrompt: string;
    expandedData: any;
    createdAt: string;
    updatedAt: string;
  };
  onClose: () => void;
}

export function ExportModal({ idea, onClose }: ExportModalProps) {
  const [activeTab, setActiveTab] = useState<'json' | 'prompt'>('json');
  const [copied, setCopied] = useState(false);

  const jsonData = {
    title: idea.expandedData?.title || "Untitled Idea",
    description: idea.expandedData?.description || idea.originalPrompt,
    originalPrompt: idea.originalPrompt,
    expandedData: idea.expandedData,
    metadata: {
      id: idea.id,
      createdAt: idea.createdAt,
      updatedAt: idea.updatedAt,
    }
  };

  const developmentPrompt = `# How to develop this app using Deco

## Quick Start
1. **Create Deco project:**
   \`\`\`bash
   npm create deco
   \`\`\`

2. **Follow the setup steps** in the CLI

3. **Open your AI Editor** (Cursor, Claude Code, etc.)

4. **Paste the following prompt** in your AI editor:

---

# Software Development Request

## Project Description
**${idea.expandedData?.title || "Software Project"}**

${idea.expandedData?.description || idea.originalPrompt}

## Development Instructions

### Architecture
${idea.expandedData?.architecture ? `
**File Structure:**
${idea.expandedData.architecture.files?.map((file: any) => `- ${file.path}: ${file.description}`).join('\n') || 'No architecture defined'}
` : 'Architecture not yet defined'}

### Features to Implement
${idea.expandedData?.features ? idea.expandedData.features.map((feature: any, index: number) => `
${index + 1}. **${feature.title}**
   ${feature.description}
`).join('\n') : 'Features not yet defined'}

### Data Models
${idea.expandedData?.dataModels ? idea.expandedData.dataModels.map((model: any) => `
**${model.title}:**
\`\`\`typescript
${model.schema}
\`\`\`
`).join('\n') : 'Data models not yet defined'}

### Tools Required
${idea.expandedData?.tools ? idea.expandedData.tools.map((tool: any) => `
**${tool.title}:**
- Description: ${tool.description}
- Input: \`${tool.inputSchema}\`
- Output: \`${tool.outputSchema}\`
`).join('\n') : 'Tools not yet defined'}

### Implementation Phases
${idea.expandedData?.implementationPhases ? idea.expandedData.implementationPhases.map((phase: any, index: number) => `
**Phase ${index + 1}: ${phase.title}** (${phase.duration})
${phase.description}

Tasks:
${phase.tasks?.map((task: string) => `- ${task}`).join('\n') || 'No tasks defined'}
`).join('\n') : 'Implementation phases not yet defined'}

### Success Metrics
${idea.expandedData?.successMetrics ? idea.expandedData.successMetrics.map((metric: string) => `- ${metric}`).join('\n') : 'Success metrics not yet defined'}

---

**Instructions:**
1. Copy this entire prompt
2. Paste it into your AI development tool (Cursor, Claude, etc.)
3. The AI will help you build the complete application following Deco MCP patterns

*Generated by Pronto - AI-Powered Idea Expansion Platform*
*Original idea: "${idea.originalPrompt}"*`;

  const handleCopy = async (content: string) => {
    try {
      await navigator.clipboard.writeText(content);
      setCopied(true);
      toast.success("Copied to clipboard!");
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      toast.error("Failed to copy to clipboard");
    }
  };

  const currentContent = activeTab === 'json' 
    ? JSON.stringify(jsonData, null, 2)
    : developmentPrompt;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-hidden">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Export Idea
              </CardTitle>
              <CardDescription>
                Export your expanded idea as JSON data or development prompt
              </CardDescription>
            </div>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="w-4 h-4" />
            </Button>
          </div>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {/* Tab Navigation */}
          <div className="flex gap-2 border-b">
            <button
              onClick={() => setActiveTab('json')}
              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${
                activeTab === 'json'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <div className="flex items-center gap-2">
                <Code className="w-4 h-4" />
                JSON Data
              </div>
            </button>
            <button
              onClick={() => setActiveTab('prompt')}
              className={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${
                activeTab === 'prompt'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700'
              }`}
            >
              <div className="flex items-center gap-2">
                <FileText className="w-4 h-4" />
                Development Prompt
              </div>
            </button>
          </div>

          {/* Content Header */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Badge variant="outline">
                {activeTab === 'json' ? 'JSON Format' : 'Markdown Format'}
              </Badge>
              <span className="text-sm text-gray-500">
                {activeTab === 'json' 
                  ? 'Complete data structure for the expanded idea'
                  : 'Ready-to-use prompt for AI development tools'
                }
              </span>
            </div>
            <Button
              onClick={() => handleCopy(currentContent)}
              className="flex items-center gap-2"
              variant={copied ? "default" : "outline"}
            >
              {copied ? (
                <>
                  <Check className="w-4 h-4" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="w-4 h-4" />
                  Copy
                </>
              )}
            </Button>
          </div>

          {/* Content Display */}
          <div className="bg-gray-50 border rounded-lg p-4 max-h-[60vh] overflow-auto">
            <pre className="text-sm font-mono whitespace-pre-wrap text-gray-800">
              {currentContent}
            </pre>
          </div>

          {/* Instructions */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="font-semibold text-blue-800 mb-2">
              {activeTab === 'json' ? 'JSON Data Usage' : 'Development Instructions'}
            </h3>
            <p className="text-sm text-blue-700">
              {activeTab === 'json' 
                ? 'This JSON contains the complete expanded idea data. You can use it for further processing, storage, or integration with other tools.'
                : 'Copy this prompt and paste it into your AI development tool (Cursor, Claude, etc.) to start building the application. The prompt includes setup instructions and detailed specifications.'
              }
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
